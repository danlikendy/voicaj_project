#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VoiceActionJournal
"""

from PIL import Image, ImageDraw
import os

def create_icon(size):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # –†–∞–∑–º–µ—Ä—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    scale = size / 1024.0
    
    # –§–æ–Ω - –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
    bg_color = (74, 144, 226)  # #4A90E2
    bg_color2 = (123, 104, 238)  # #7B68EE
    
    # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è —Ñ–æ–Ω–∞
    margin = int(50 * scale)
    draw.rounded_rectangle([margin, margin, size - margin, size - margin], 
                          radius=int(100 * scale), fill=bg_color)
    
    # –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    center_x, center_y = size // 2, size // 2
    
    # –ú–∏–∫—Ä–æ—Ñ–æ–Ω
    mic_width = int(60 * scale)
    mic_height = int(200 * scale)
    mic_x = center_x - mic_width // 2
    mic_y = center_y - mic_height // 2
    
    # –ö–æ—Ä–ø—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–±–µ–ª—ã–π)
    draw.rounded_rectangle([mic_x, mic_y, mic_x + mic_width, mic_y + mic_height], 
                          radius=int(30 * scale), fill=(255, 255, 255))
    
    # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    top_width = int(80 * scale)
    top_height = int(40 * scale)
    top_x = center_x - top_width // 2
    top_y = mic_y - top_height // 2
    draw.ellipse([top_x, top_y, top_x + top_width, top_y + top_height], 
                 fill=(255, 255, 255))
    
    # –û—Å–Ω–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    base_width = int(80 * scale)
    base_height = int(20 * scale)
    base_x = center_x - base_width // 2
    base_y = mic_y + mic_height
    draw.rounded_rectangle([base_x, base_y, base_x + base_width, base_y + base_height], 
                          radius=int(10 * scale), fill=(255, 255, 255))
    
    # –°–µ—Ç–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—Å–∏–Ω–∏–µ –∫—Ä—É–≥–∏)
    grid_center_y = mic_y + int(20 * scale)
    draw.ellipse([center_x - int(25 * scale), grid_center_y - int(25 * scale),
                  center_x + int(25 * scale), grid_center_y + int(25 * scale)], 
                 outline=bg_color, width=int(3 * scale))
    draw.ellipse([center_x - int(15 * scale), grid_center_y - int(15 * scale),
                  center_x + int(15 * scale), grid_center_y + int(15 * scale)], 
                 outline=bg_color, width=int(2 * scale))
    
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ –≤–æ–ª–Ω—ã (–±–µ–ª—ã–µ)
    wave_start_x = center_x + int(150 * scale)
    wave_y = center_y - int(100 * scale)
    
    # –í–æ–ª–Ω–∞ 1
    for i in range(3):
        x1 = wave_start_x + i * int(100 * scale)
        y1 = wave_y + i * int(20 * scale)
        x2 = x1 + int(100 * scale)
        y2 = y1 - int(50 * scale)
        x3 = x2 + int(100 * scale)
        y3 = y1
        draw.arc([x1, y1 - int(25 * scale), x3, y1 + int(25 * scale)], 
                 start=0, end=180, fill=(255, 255, 255), width=int(8 * scale))
    
    # –í–æ–ª–Ω—ã —Å–ª–µ–≤–∞
    wave_start_x_left = center_x - int(350 * scale)
    for i in range(3):
        x1 = wave_start_x_left + i * int(100 * scale)
        y1 = wave_y + i * int(20 * scale)
        x2 = x1 + int(100 * scale)
        y2 = y1 - int(50 * scale)
        x3 = x2 + int(100 * scale)
        y3 = y1
        draw.arc([x1, y1 - int(25 * scale), x3, y1 + int(25 * scale)], 
                 start=0, end=180, fill=(255, 255, 255), width=int(8 * scale))
    
    # –¢–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    for i in range(3):
        # –°–ø—Ä–∞–≤–∞
        x = center_x + int(180 * scale) + i * int(20 * scale)
        y = wave_y - int(20 * scale) - i * int(20 * scale)
        radius = int((8 - i * 2) * scale)
        draw.ellipse([x - radius, y - radius, x + radius, y + radius], 
                     fill=(255, 255, 255))
        
        # –°–ª–µ–≤–∞
        x = center_x - int(180 * scale) - i * int(20 * scale)
        draw.ellipse([x - radius, y - radius, x + radius, y + radius], 
                     fill=(255, 255, 255))
    
    return img

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è iOS
    icon_sizes = [
        20, 29, 40, 58, 60, 76, 80, 87, 120, 152, 167, 180, 1024
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫
    output_dir = "generated_icons"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∫–æ–Ω–∫–∏ –¥–ª—è iOS...")
    
    for size in icon_sizes:
        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
        icon = create_icon(size)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        filename = f"{output_dir}/icon_{size}x{size}.png"
        icon.save(filename, "PNG")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–∫–æ–Ω–∫–∞ {size}x{size} - {filename}")
    
    print(f"\nüéâ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ '{output_dir}'!")
    print("\nüì± –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ:")
    print("1. –û—Ç–∫—Ä—ã—Ç—å Xcode")
    print("2. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –≤ AppIcon.appiconset")
    print("3. –ò–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ Assets.xcassets")

if __name__ == "__main__":
    main()
