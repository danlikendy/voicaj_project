import SwiftUI

struct ChatView: View {
    @ObservedObject var homeViewModel: HomeViewModel
    @StateObject private var viewModel: ChatViewModel
    @State private var messageText = ""
    @FocusState private var isTextFieldFocused: Bool
    
    init(homeViewModel: HomeViewModel) {
        self.homeViewModel = homeViewModel
        // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ AI
        self._viewModel = StateObject(wrappedValue: ChatViewModel(homeViewModel: homeViewModel))
    }
    
    var body: some View {
        
        NavigationView {
            VStack(spacing: 0) {
                // Chat Messages
                ScrollViewReader { proxy in
                    ScrollView {
                        LazyVStack(spacing: 16) {
                            ForEach(viewModel.messages) { message in
                                MessageBubble(message: message)
                                    .id(message.id)
                            }
                        }
                        .padding(.horizontal, 20)
                        .padding(.top, 16)
                        .padding(.bottom, 100) // Space for input
                    }
                    .onChange(of: viewModel.messages.count) { oldCount, newCount in
                        if let lastMessage = viewModel.messages.last {
                            withAnimation(.easeInOut(duration: 0.3)) {
                                proxy.scrollTo(lastMessage.id, anchor: .bottom)
                            }
                        }
                    }
                }
                
                // Input Area
                VStack(spacing: 0) {
                    Divider()
                        .background(Color.parchment)
                    
                    HStack(spacing: 16) {
                        // Message Input
                        HStack(spacing: 12) {
                            TextField("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", text: $messageText, axis: .vertical)
                                .textFieldStyle(PlainTextFieldStyle())
                                .focused($isTextFieldFocused)
                                .lineLimit(1...4)
                                .padding(.horizontal, 16)
                                .padding(.vertical, 12)
                                .background(Color.porcelain)
                                .cornerRadius(20)
                                .onTapGesture {
                                    isTextFieldFocused = true
                                }
                                .onSubmit {
                                    print("‚å®Ô∏è Enter –Ω–∞–∂–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ")
                                    if !messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
                                        sendMessage()
                                    }
                                }
                            
                            // Send Button
                            Button(action: {
                                print("üîò –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞")
                                sendMessage()
                            }) {
                                if viewModel.isLoading {
                                    ProgressView()
                                        .progressViewStyle(CircularProgressViewStyle(tint: .honeyGold))
                                        .scaleEffect(0.8)
                                } else {
                                    Image(systemName: "arrow.up.circle.fill")
                                        .font(.system(size: 32))
                                        .foregroundColor(messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? .tobacco : .honeyGold)
                                }
                            }
                            .disabled(messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty || viewModel.isLoading)
                            .scaleEffect(messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ? 0.9 : 1.0)
                            .animation(.easeInOut(duration: 0.2), value: messageText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.vertical, 16)
                    .background(Color.porcelain)
                }
            }
            .navigationTitle("AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                // –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É - –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
            }
        }
        .background(Color.porcelain)
        .onAppear {
            viewModel.loadInitialMessage()
        }
        .onTapGesture {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —Ç–∞–ø–µ –ø–æ —ç–∫—Ä–∞–Ω—É
            isTextFieldFocused = false
        }
    }
    
    private func sendMessage() {
        let trimmedText = messageText.trimmingCharacters(in: .whitespacesAndNewlines)
        
        print("üì§ sendMessage() –≤—ã–∑–≤–∞–Ω–∞")
        print("üì§ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: '\(messageText)'")
        print("üì§ –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '\(trimmedText)'")
        print("üì§ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: \(trimmedText.count)")
        
        guard !trimmedText.isEmpty else { 
            print("‚ùå –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return 
        }
        
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '\(trimmedText)'")
        print("‚úÖ –í—ã–∑—ã–≤–∞–µ–º viewModel.sendMessage")
        
        viewModel.sendMessage(trimmedText)
        
        print("‚úÖ viewModel.sendMessage –≤—ã–ø–æ–ª–Ω–µ–Ω")
        messageText = ""
        print("‚úÖ –ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ")
        
        // –ü—Ä–æ—Å—Ç–æ–µ —Å–Ω—è—Ç–∏–µ —Ñ–æ–∫—É—Å–∞
        isTextFieldFocused = false
        print("‚úÖ –§–æ–∫—É—Å —Å–Ω—è—Ç")
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ")
    }
}

// MARK: - Message Bubble
struct MessageBubble: View {
    let message: ChatMessage
    
    var body: some View {
        HStack {
            if message.isFromUser {
                Spacer()
                
                VStack(alignment: .trailing, spacing: 4) {
                    Text(message.content)
                        .font(.system(size: 16))
                        .foregroundColor(.white)
                        .padding(.horizontal, 16)
                        .padding(.vertical, 12)
                        .background(Color.honeyGold)
                        .cornerRadius(18, corners: [.topLeft, .topRight, .bottomLeft])
                    
                    Text(message.timestamp, style: .time)
                        .font(.system(size: 12))
                        .foregroundColor(.tobacco)
                }
            } else {
                VStack(alignment: .leading, spacing: 4) {
                    HStack(spacing: 8) {
                        Image(systemName: "brain.head.profile")
                            .font(.system(size: 16))
                            .foregroundColor(.honeyGold)
                        
                        Text("AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.tobacco)
                    }
                    
                    Text(message.content)
                        .font(.system(size: 16))
                        .foregroundColor(.espresso)
                        .padding(.horizontal, 16)
                        .padding(.vertical, 12)
                        .background(Color.porcelain)
                        .cornerRadius(18, corners: [.topLeft, .topRight, .bottomRight])
                    
                    Text(message.timestamp, style: .time)
                        .font(.system(size: 12))
                        .foregroundColor(.tobacco)
                }
                
                Spacer()
            }
        }
    }
}

// MARK: - Chat Message Model
struct ChatMessage: Identifiable, Codable {
    let id: UUID
    let content: String
    let isFromUser: Bool
    let timestamp: Date
    let messageType: MessageType
    
    enum MessageType: String, Codable {
        case text
        case taskCreation
        case taskSearch
        case aiRecommendation
    }
    
    init(content: String, isFromUser: Bool, messageType: MessageType = .text) {
        self.id = UUID()
        self.content = content
        self.isFromUser = isFromUser
        self.timestamp = Date()
        self.messageType = messageType
    }
}

// MARK: - Chat ViewModel
class ChatViewModel: ObservableObject {
    @Published var messages: [ChatMessage] = []
    @ObservedObject var homeViewModel: HomeViewModel
    
    private let aiService: any AIServiceProtocol
    @Published var isLoading = false
    
    init(homeViewModel: HomeViewModel) {
        self.homeViewModel = homeViewModel
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Mock AI —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.aiService = MockAIService()
        print("ü§ñ ChatView: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock AI —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    }
    
    func loadInitialMessage() {
        if messages.isEmpty {
            let welcomeMessage = ChatMessage(
                content: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ß—Ç–æ –Ω—É–∂–Ω–æ?",
                isFromUser: false,
                messageType: .aiRecommendation
            )
            messages.append(welcomeMessage)
        }
    }
    
    func sendMessage(_ text: String) {
        print("ü§ñ ChatViewModel.sendMessage –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '\(text)'")
        print("ü§ñ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: \(text.count)")
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userMessage = ChatMessage(content: text, isFromUser: true)
        messages.append(userMessage)
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: \(messages.count)")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        isLoading = true
        print("‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω")
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π AI –æ—Ç–≤–µ—Ç
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Task –¥–ª—è generateAIResponse")
        Task {
            print("ü§ñ Task –∑–∞–ø—É—â–µ–Ω")
            await generateAIResponse(for: text)
            print("ü§ñ Task –∑–∞–≤–µ—Ä—à–µ–Ω")
        }
        print("ü§ñ Task –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
    }
    
    private func generateAIResponse(for userMessage: String) async {
        print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç –¥–ª—è: \(userMessage)")
        
        do {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            let context = messages.suffix(5).map { $0.content }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            if shouldCreateTask(from: userMessage) {
                print("ü§ñ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                let result = try await aiService.createTaskFromMessage(userMessage, context: context)
                
                await MainActor.run {
                    if result.success, let task = result.task {
                        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                        self.createTaskFromAIResult(task)
                        let message = ChatMessage(content: result.message, isFromUser: false)
                        self.messages.append(message)
                        print("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞")
                    } else {
                        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                        let message = ChatMessage(content: result.message, isFromUser: false)
                        self.messages.append(message)
                        print("‚úÖ –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç AI")
                    }
                    self.isLoading = false
                }
            } else {
                // –û–±—ã—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç
                print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç")
                let response = try await aiService.generateResponse(for: userMessage, context: context)
                
                await MainActor.run {
                    let message = ChatMessage(content: response, isFromUser: false)
                    self.messages.append(message)
                    self.isLoading = false
                    print("‚úÖ AI –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: \(response.prefix(50))...")
                }
            }
            
            print("‚úÖ AI –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ AI: \(error)")
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–∞–µ–º fallback –æ—Ç–≤–µ—Ç
            await MainActor.run {
                let fallbackMessage = ChatMessage(
                    content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á.",
                    isFromUser: false
                )
                self.messages.append(fallbackMessage)
                self.isLoading = false
            }
        }
    }
    
    private func generateContextualResponse(to message: String) -> String {
        let lowercased = message.lowercased()
        
        // –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if lowercased.contains("–∑–∞–¥–∞—á–∞") || lowercased.contains("—Å–æ–∑–¥–∞—Ç—å") || lowercased.contains("–¥–æ–±–∞–≤–∏—Ç—å") {
            return "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É! –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≤—Ç—Ä–∞'"
        }
        
        if lowercased.contains("–ø—Ä–∏–≤–µ—Ç") || lowercased.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") {
            return "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ú–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º."
        }
        
        if lowercased.contains("—Å–ø–∞—Å–∏–±–æ") || lowercased.contains("–±–ª–∞–≥–æ–¥–∞—Ä—é") {
            return "–†–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –µ—â–µ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ."
        }
        
        if lowercased.contains("–ø–æ–º–æ—â—å") || lowercased.contains("—á—Ç–æ —É–º–µ–µ—à—å") {
            return "–Ø —É–º–µ—é:\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π\n‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!"
        }
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—ë
        if isTaskLikeMessage(message) {
            return "–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É! –Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –µ—ë –¥–ª—è –≤–∞—Å. –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏."
        }
        
        // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        return "–ü–æ–Ω—è–ª! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á."
    }
    
    private func isTaskLikeMessage(_ message: String) -> Bool {
        let taskKeywords = [
            "–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å",
            "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å",
            "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å"
        ]
        
        let lowercased = message.lowercased()
        return taskKeywords.contains { lowercased.contains($0) } ||
               lowercased.contains("–∑–∞–≤—Ç—Ä–∞") ||
               lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") ||
               lowercased.contains("–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
    }
    
    // AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
    /*
    private func generateAIResponse(for userMessage: String) async {
        print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç –¥–ª—è: \(userMessage)")
        
        do {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            let context = messages.suffix(5).map { $0.content }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            if shouldCreateTask(from: userMessage) {
                let result = try await aiService.createTaskFromMessage(userMessage, context: context)
                
                await MainActor.run {
                    if result.success, let task = result.task {
                        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                        self.createTaskFromAIResult(task)
                        let message = ChatMessage(content: result.message, isFromUser: false)
                        self.messages.append(message)
                    } else {
                        // –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                        let message = ChatMessage(content: result.message, isFromUser: false)
                        self.messages.append(message)
                    }
                    self.isLoading = false
                }
            } else {
                // –û–±—ã—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç
                let response = try await aiService.generateResponse(for: userMessage, context: context)
                
                await MainActor.run {
                    let message = ChatMessage(content: response, isFromUser: false)
                    self.messages.append(message)
                    self.isLoading = false
                }
            }
            
            print("‚úÖ AI –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ AI: \(error)")
            
            await MainActor.run {
                let errorMessage = ChatMessage(
                    content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    isFromUser: false
                )
                self.messages.append(errorMessage)
                self.isLoading = false
            }
        }
    }
    
    private func shouldCreateTask(from message: String) -> Bool {
        let taskKeywords = [
            "—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
            "–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É"
        ]
        
        let lowercased = message.lowercased()
        return taskKeywords.contains { lowercased.contains($0) }
    }
    
    private func createTaskFromAIResult(_ extractedTask: ExtractedTask) {
        let task = TaskItem(
            title: extractedTask.title,
            description: extractedTask.description ?? "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞",
            priority: extractedTask.priority,
            status: .planned,
            dueDate: extractedTask.dueDate,
            tags: extractedTask.tags + ["—Å–æ–∑–¥–∞–Ω–æ-–∏–∑-—á–∞—Ç–∞"],
            createdAt: Date(),
            updatedAt: Date()
        )
        
        homeViewModel.taskManager.addTask(task)
        print("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞: \(task.title)")
    }
    */
    
    // MARK: - Task Creation
    private func createTaskFromMessage(_ text: String) -> String {
        // –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        let lowercased = text.lowercased()
        var taskTitle = ""
        var priority: TaskPriority = .medium
        var status: TaskStatus = .planned
        var dueDate: Date? = nil
        var tags: [String] = []
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–º–µ–∂–¥—É –∫–∞–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)
        if let quoteStart = text.range(of: "\"")?.lowerBound,
           let quoteEnd = text.range(of: "\"", range: quoteStart..<text.endIndex)?.upperBound {
            taskTitle = String(text[quoteStart..<quoteEnd])
        } else {
            // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            let taskKeywords = ["–∑–∞–¥–∞—á–∞", "—Å–æ–∑–¥–∞—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "–Ω–æ–≤–∞—è", "–Ω—É–∂–Ω–æ", "—Ö–æ—á—É", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–¥–µ–ª–∞—Ç—å"]
            for keyword in taskKeywords {
                if let keywordIndex = lowercased.range(of: keyword)?.upperBound {
                    let remainingText = String(text[keywordIndex...]).trimmingCharacters(in: .whitespaces)
                    if remainingText.count > 3 {
                        taskTitle = remainingText
                        break
                    }
                }
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if lowercased.contains("—Å—Ä–æ—á–Ω–æ") || lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("–∫—Ä–∏—Ç–∏—á–Ω–æ") || lowercased.contains("–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ") {
            priority = .high
            status = .important
            tags.append("—Å—Ä–æ—á–Ω–æ")
        } else if lowercased.contains("–Ω–∏–∑–∫–∏–π") || lowercased.contains("–ø–æ—Ç–æ–º") || lowercased.contains("–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å") {
            priority = .low
            tags.append("–Ω–∏–∑–∫–∏–π-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        let calendar = Calendar.current
        let today = Date()
        
        if lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            dueDate = today
            tags.append("—Å–µ–≥–æ–¥–Ω—è")
        } else if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") {
            dueDate = calendar.date(byAdding: .day, value: 1, to: today)
            tags.append("–∑–∞–≤—Ç—Ä–∞")
        } else if lowercased.contains("–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ") || lowercased.contains("–Ω–∞ –Ω–µ–¥–µ–ª–µ") {
            dueDate = calendar.date(byAdding: .weekOfYear, value: 1, to: today)
            tags.append("–Ω–∞-–Ω–µ–¥–µ–ª–µ")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏
        if lowercased.contains("–≤—Å—Ç—Ä–µ—á–∞") || lowercased.contains("—Å–æ–±—Ä–∞–Ω–∏–µ") {
            tags.append("–≤—Å—Ç—Ä–µ—á–∞")
        }
        if lowercased.contains("–∑–≤–æ–Ω–æ–∫") || lowercased.contains("–ø–æ–∑–≤–æ–Ω–∏—Ç—å") {
            tags.append("–∑–≤–æ–Ω–æ–∫")
        }
        if lowercased.contains("–ø—Ä–æ–µ–∫—Ç") || lowercased.contains("—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞") {
            tags.append("–ø—Ä–æ–µ–∫—Ç")
        }
        if lowercased.contains("–ø–æ–∫—É–ø–∫–∏") || lowercased.contains("–∫—É–ø–∏—Ç—å") {
            tags.append("–ø–æ–∫—É–ø–∫–∏")
        }
        
        // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
        if taskTitle.isEmpty || taskTitle.count < 3 {
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É \"–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\"\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É \"–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º\"\n‚Ä¢ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ \"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\"\n‚Ä¢ –ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≤—Ç—Ä–∞"
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
        let newTask = TaskItem(
            title: taskTitle,
            description: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ AI —á–∞—Ç: \(text)",
            status: status,
            priority: priority,
            dueDate: dueDate,
            tags: tags + ["ai-—Å–æ–∑–¥–∞–Ω–∞"],
            isPrivate: false,
            audioURL: nil,
            transcript: nil,
            createdAt: Date(),
            updatedAt: Date(),
            completedDate: nil,
            parentTaskId: nil,
            subtasks: []
        )
        
        homeViewModel.taskManager.addTask(newTask)
        
        var response = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìã **\(taskTitle)**\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: \(priority.displayName)\nüìä –°—Ç–∞—Ç—É—Å: \(status.displayName)"
        
        if let dueDate = dueDate {
            let formatter = DateFormatter()
            formatter.dateStyle = .medium
            response += "\nüìÖ –°—Ä–æ–∫: \(formatter.string(from: dueDate))"
        }
        
        if !tags.isEmpty {
            response += "\nüè∑Ô∏è –¢–µ–≥–∏: \(tags.joined(separator: ", "))"
        }
        
        response += "\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª \"\(status.displayName)\" –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
        
        return response
    }
    
    // MARK: - Task Search
    private func searchTasksFromMessage(_ text: String) -> String {
        let allTasks = homeViewModel.taskManager.tasks
        
        if allTasks.isEmpty {
            return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–ø–∏—Å–∞–≤:\n‚Ä¢ \"–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É \\\"–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞\\\"\""
        }
        
        var searchResults: [TaskItem] = []
        let lowercased = text.lowercased()
        
        // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if lowercased.contains("–≤–∞–∂–Ω") || lowercased.contains("—Å—Ä–æ—á–Ω") {
            searchResults = allTasks.filter { $0.priority == .high || $0.status == .important }
        } else if lowercased.contains("–≤—ã–ø–æ–ª–Ω–µ–Ω") || lowercased.contains("–∑–∞–≤–µ—Ä—à–µ–Ω") {
            searchResults = allTasks.filter { $0.status == .completed }
        } else if lowercased.contains("–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ") || lowercased.contains("–ø–ª–∞–Ω–∞—Ö") {
            searchResults = allTasks.filter { $0.status == .planned }
        } else if lowercased.contains("–∑–∞—Å—Ç—Ä—è–ª") || lowercased.contains("–ø—Ä–æ–±–ª–µ–º") {
            searchResults = allTasks.filter { $0.status == .stuck }
        } else {
            // –û–±—â–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            searchResults = allTasks.filter { task in
                task.title.lowercased().contains(lowercased) ||
                (task.description?.lowercased().contains(lowercased) ?? false)
            }
        }
        
        if searchResults.isEmpty {
            return "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ \"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\"\n‚Ä¢ \"–ù–∞–π—Ç–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏\"\n‚Ä¢ \"–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\""
        }
        
        var response = "üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: \(searchResults.count)\n\n"
        
        for (index, task) in searchResults.prefix(5).enumerated() {
            let statusEmoji = getStatusEmoji(for: task.status)
            let priorityEmoji = getPriorityEmoji(for: task.priority)
            
            response += "\(index + 1). \(statusEmoji) **\(task.title)**\n"
            response += "   \(priorityEmoji) \(task.priority.displayName) ‚Ä¢ \(task.status.displayName)\n"
            
            if let description = task.description, !description.isEmpty {
                response += "   üìù \(description)\n"
            }
            
            if let dueDate = task.dueDate {
                response += "   üìÖ –°—Ä–æ–∫: \(dueDate.formatted(date: .abbreviated, time: .omitted))\n"
            }
            
            response += "\n"
        }
        
        if searchResults.count > 5 {
            response += "... –∏ –µ—â–µ \(searchResults.count - 5) –∑–∞–¥–∞—á"
        }
        
        return response
    }
    
    // MARK: - Show All Tasks
    private func showAllTasks() -> String {
        let allTasks = homeViewModel.taskManager.tasks
        
        if allTasks.isEmpty {
            return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, –Ω–∞–ø–∏—Å–∞–≤:\n‚Ä¢ \"–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É \\\"–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞\\\"\""
        }
        
        let groupedTasks = Dictionary(grouping: allTasks) { $0.status }
        var response = "üìã **–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏** (\(allTasks.count))\n\n"
        
        for status in TaskStatus.allCases {
            if let tasks = groupedTasks[status], !tasks.isEmpty {
                let statusEmoji = getStatusEmoji(for: status)
                response += "\(statusEmoji) **\(status.displayName)** (\(tasks.count))\n"
                
                for task in tasks.prefix(3) {
                    let priorityEmoji = getPriorityEmoji(for: task.priority)
                    response += "   ‚Ä¢ \(priorityEmoji) \(task.title)\n"
                }
                
                if tasks.count > 3 {
                    response += "   ... –∏ –µ—â–µ \(tasks.count - 3) –∑–∞–¥–∞—á\n"
                }
                
                response += "\n"
            }
        }
        
        return response
    }
    
    // MARK: - Productivity Analysis
    private func getProductivityAnalysis() -> String {
        let allTasks = homeViewModel.taskManager.tasks
        
        if allTasks.isEmpty {
            return "üìä **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        }
        
        let completedTasks = allTasks.filter { $0.status == .completed }
        let activeTasks = allTasks.filter { $0.status != .completed }
        let highPriorityTasks = allTasks.filter { $0.priority == .high }
        
        let completionRate = allTasks.isEmpty ? 0.0 : Double(completedTasks.count) / Double(allTasks.count) * 100
        
        var response = "üìä **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        response += "üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += "‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: \(allTasks.count)\n"
        response += "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: \(completedTasks.count)\n"
        response += "‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: \(activeTasks.count)\n"
        response += "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.1f", completionRate))%\n\n"
        
        response += "üéØ **–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:**\n"
        response += "‚Ä¢ –í—ã—Å–æ–∫–∏–π: \(highPriorityTasks.count)\n"
        response += "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: \(allTasks.filter { $0.priority == .medium }.count)\n"
        response += "‚Ä¢ –ù–∏–∑–∫–∏–π: \(allTasks.filter { $0.priority == .low }.count)\n\n"
        
        response += "üìä **–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n"
        for status in TaskStatus.allCases {
            let count = allTasks.filter { $0.status == status }.count
            if count > 0 {
                let emoji = getStatusEmoji(for: status)
                response += "‚Ä¢ \(emoji) \(status.displayName): \(count)\n"
            }
        }
        
        return response
    }
    
    // MARK: - Productivity Recommendations
    private func getProductivityRecommendations() -> String {
        let allTasks = homeViewModel.taskManager.tasks
        let completedTasks = allTasks.filter { $0.status == .completed }
        let highPriorityTasks = allTasks.filter { $0.priority == .high && $0.status != .completed }
        
        var response = "üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**\n\n"
        
        if allTasks.isEmpty {
            response += "üéØ **–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ:**\n"
            response += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É\n"
            response += "‚Ä¢ –ü–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ü–µ–ª—å\n"
            response += "‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        } else if completedTasks.count < 3 {
            response += "üöÄ **–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:**\n"
            response += "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –≤ –¥–µ–Ω—å\n"
            response += "‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ\n"
            response += "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏\n\n"
        } else if highPriorityTasks.count > 2 {
            response += "‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è:**\n"
            response += "‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n"
            response += "‚Ä¢ –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–µ–ª–∫–∏–µ\n"
            response += "‚Ä¢ –î–µ–ª–µ–≥–∏—Ä—É–π—Ç–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ–µ\n\n"
        } else {
            response += "üåü **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:**\n"
            response += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏\n"
            response += "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            response += "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥\n\n"
        }
        
        response += "üîß **–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:**\n"
        response += "‚Ä¢ üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏\n"
        response += "‚Ä¢ ‚è∞ –í—ã–¥–µ–ª—è–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n"
        response += "‚Ä¢ üìù –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏\n"
        response += "‚Ä¢ üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        
        response += "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑?"
        
        return response
    }
    
    // MARK: - Default Response
    private func getDefaultResponse() -> String {
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n‚Ä¢ üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∞–º–∏** - —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–∏—Å–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ üîç **–ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏** - –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n‚Ä¢ üí° **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º** - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n‚Ä¢ üìä **–ê–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏** - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã\n‚Ä¢ üéØ **–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ü–µ–ª–µ–π** - –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n‚Ä¢ \"–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É \\\"–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç\\\"\"\n‚Ä¢ \"–ù–∞–π—Ç–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏\"\n‚Ä¢ \"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\"\n‚Ä¢ \"–î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\""
    }
    
    // MARK: - Helper Methods
    private func getStatusEmoji(for status: TaskStatus) -> String {
        switch status {
        case .completed: return "‚úÖ"
        case .important: return "üî•"
        case .planned: return "üìã"
        case .stuck: return "‚ö†Ô∏è"
        case .paused: return "‚è∏Ô∏è"
        case .waiting: return "‚è≥"
        case .delegated: return "üë•"
        case .recurring: return "üîÑ"
        case .idea: return "üí°"
        }
    }
    
    private func getPriorityEmoji(for priority: TaskPriority) -> String {
        switch priority {
        case .high: return "üî¥"
        case .medium: return "üü°"
        case .low: return "üü¢"
        }
    }
    
    func clearChat() {
        messages.removeAll()
        loadInitialMessage()
    }
    
    private func shouldCreateTask(from message: String) -> Bool {
        let lowercased = message.lowercased()
        let taskKeywords = [
            "–ø–æ—Å—Ç–∞–≤—å", "—Å–æ–∑–¥–∞–π", "–¥–æ–±–∞–≤—å", "–∑–∞–¥–∞—á–∞", "–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é",
            "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å",
            "–∫—É–ø–∏—Ç—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
        ]
        
        return taskKeywords.contains { lowercased.contains($0) }
    }
    
    private func createTaskFromAIResult(_ extractedTask: ExtractedTask) {
        let newTask = TaskItem(
            title: extractedTask.title,
            description: extractedTask.description ?? "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ AI –∏–∑ —á–∞—Ç–∞",
            status: .planned,
            priority: extractedTask.priority,
            dueDate: extractedTask.dueDate,
            tags: extractedTask.tags + ["ai-—Å–æ–∑–¥–∞–Ω–∞", "—á–∞—Ç"],
            isPrivate: false,
            audioURL: nil,
            transcript: nil,
            createdAt: Date(),
            updatedAt: Date(),
            completedDate: nil,
            parentTaskId: nil,
            subtasks: []
        )
        
        homeViewModel.taskManager.addTask(newTask)
        print("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞: \(extractedTask.title)")
    }
}



#Preview {
    ChatView(homeViewModel: HomeViewModel())
}
