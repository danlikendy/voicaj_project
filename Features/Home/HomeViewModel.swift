import Foundation
import Combine
import SwiftUI
import AVFoundation
import Speech

// MARK: - Simple TaskManager
@MainActor
class SimpleTaskManager: ObservableObject {
    @Published var tasks: [TaskItem] = []
    
    func addTask(_ task: TaskItem) {
        tasks.append(task)
        saveTasks()
    }
    
    func updateTask(_ task: TaskItem) {
        if let index = tasks.firstIndex(where: { $0.id == task.id }) {
            tasks[index] = task
            saveTasks()
        }
    }
    
    func deleteTask(_ task: TaskItem) {
        tasks.removeAll { $0.id == task.id }
        saveTasks()
    }
    
    func toggleTaskCompletion(_ task: TaskItem) {
        var updatedTask = task
        if updatedTask.completedDate == nil {
            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            updatedTask.completedDate = Date()
            updatedTask.status = .completed
        } else {
            // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            updatedTask.completedDate = nil
            updatedTask.status = .planned
        }
        updateTask(updatedTask)
    }
    
    private func saveTasks() {
        // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ UserDefaults
        if let data = try? JSONEncoder().encode(tasks) {
            UserDefaults.standard.set(data, forKey: "savedTasks")
        }
    }
    
    private func loadTasks() {
        if let data = UserDefaults.standard.data(forKey: "savedTasks"),
           let loadedTasks = try? JSONDecoder().decode([TaskItem].self, from: data) {
            tasks = loadedTasks
        }
    }
    
    init() {
        loadTasks()
    }
}

@MainActor
class HomeViewModel: ObservableObject {
    @Published var collapsedSections: Set<TaskStatus> = []
    @Published var isRecordingButtonPulsing = false
    
    // TaskManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
    @Published var taskManager = SimpleTaskManager()
    
    // Computed property –¥–ª—è –∑–∞–¥–∞—á
    var tasks: [TaskItem] {
        return taskManager.tasks
    }
    
    // MARK: - Recording States
    @Published var isRecording = false
    @Published var recordingTime: TimeInterval = 0
    @Published var recordingStartTime: Date?
    @Published var waveHeights: [CGFloat] = Array(repeating: 0.3, count: 20)
    
    // MARK: - Transcription and AI Analysis
    @Published var transcript = ""
    @Published var isTranscribing = false
    @Published var aiAnalysisResult: String = ""
    @Published var isAnalyzing = false
    
    // MARK: - UI State
    @Published var showingTaskCreation = false
    @Published var showingAITest = false
    
    // MARK: - Voice Recording (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
    
    private var cancellables = Set<AnyCancellable>()
    private var recordingTimer: Timer?
    private var audioRecorder: AVAudioRecorder?
    private var speechRecognizer: SFSpeechRecognizer?
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?
    private var audioEngine: AVAudioEngine?
    
    // MARK: - AI Service
    private var aiService: any AIServiceProtocol
    
    init() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π MockAIService —Å –ª—É—á—à–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
        self.aiService = MockAIService()
        print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–π Mock AI —Å–µ—Ä–≤–∏—Å")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å LocalAIService.swift –≤ –ø—Ä–æ–µ–∫—Ç Xcode")
        
        print("üöÄ HomeViewModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
        setupData()
        startPulsingAnimation()
        setupSpeechRecognition()
        print("‚úÖ HomeViewModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    }
    
    // MARK: - Speech Recognition Setup
    private func setupSpeechRecognition() {
        speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "ru-RU"))
        // –ù–µ —Å–æ–∑–¥–∞–µ–º audioEngine –∑–¥–µ—Å—å - —Å–æ–∑–¥–∞–¥–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    }
    
    // MARK: - Recording Methods
    func startRecording() {
        guard !isRecording else { return }
        
        print("üé§ –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏...")
        
        // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è UI
        DispatchQueue.main.async {
            self.isRecording = true
            self.recordingStartTime = Date()
            self.recordingTime = 0
            print("üéØ UI –æ–±–Ω–æ–≤–ª–µ–Ω: isRecording = \(self.isRecording)")
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
        requestMicrophonePermission { [weak self] granted in
            guard let self = self else { return }
            
            print("üé§ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω: \(granted)")
            
            if granted {
                // –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                self.requestSpeechRecognitionPermission { speechGranted in
                    print("üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: \(speechGranted)")
                    
                    DispatchQueue.main.async {
                        if speechGranted {
                            // –°–æ–∑–¥–∞–µ–º audioEngine —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                            self.audioEngine = AVAudioEngine()
                            
                            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Å–µ—Å—Å–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                            self.setupAudioSession { success in
                                if success {
                                    print("‚úÖ –ê—É–¥–∏–æ—Å–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                                    self.startRecordingTimer()
                                    self.setupWaveAnimation()
                                    self.startAudioRecording()
                                    self.startSpeechRecognition()
                                } else {
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É–¥–∏–æ—Å–µ—Å—Å–∏—é")
                                    self.isRecording = false
                                }
                            }
                        } else {
                            print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
                            self.isRecording = false
                        }
                    }
                }
            } else {
                DispatchQueue.main.async {
                    print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
                    self.isRecording = false
                }
            }
        }
    }
    
    func stopRecording() {
        guard isRecording else { return }
        
        DispatchQueue.main.async {
            self.isRecording = false
            self.stopRecordingTimer()
            self.stopAudioRecording()
            self.stopSpeechRecognition()
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–∏
            self.createTaskFromRecording()
        }
    }
    
    private func startRecordingTimer() {
        recordingTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in
            Task { @MainActor in
                guard let self = self, let startTime = self.recordingStartTime else { return }
                self.recordingTime = Date().timeIntervalSince(startTime)
            }
        }
    }
    
    private func stopRecordingTimer() {
        recordingTimer?.invalidate()
        recordingTimer = nil
    }
    
    private func setupWaveAnimation() {
        Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in
            Task { @MainActor in
                guard let self = self else { return }
                for i in 0..<self.waveHeights.count {
                    self.waveHeights[i] = CGFloat.random(in: 0.1...1.0)
                }
            }
        }
    }
    
    private func requestMicrophonePermission(completion: @escaping (Bool) -> Void) {
        if #available(iOS 17.0, *) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API –¥–ª—è iOS 17.0+
            AVAudioApplication.requestRecordPermission { granted in
                DispatchQueue.main.async {
                    print("üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω (iOS 17+): \(granted)")
                    completion(granted)
                }
            }
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π iOS
            let audioSession = AVAudioSession.sharedInstance()
            let currentStatus = audioSession.recordPermission
            
            print("üîç –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω (legacy): \(currentStatus.rawValue)")
            
            switch currentStatus {
            case .granted:
                print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ")
                completion(true)
            case .denied:
                print("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                completion(false)
            case .undetermined:
                print("‚ùì –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º...")
                audioSession.requestRecordPermission { granted in
                    DispatchQueue.main.async {
                        print("üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω: \(granted)")
                        completion(granted)
                    }
                }
            @unknown default:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
                completion(false)
            }
        }
    }
    
    private func requestSpeechRecognitionPermission(completion: @escaping (Bool) -> Void) {
        SFSpeechRecognizer.requestAuthorization { status in
            DispatchQueue.main.async {
                let granted = status == .authorized
                completion(granted)
            }
        }
    }
    
    private func setupAudioSession(completion: @escaping (Bool) -> Void) {
        let audioSession = AVAudioSession.sharedInstance()
        
        do {
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏...")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if #available(iOS 17.0, *) {
                print("üîß –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å (iOS 17+): –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API")
            } else {
                let permissionStatus = audioSession.recordPermission
                print("üîß –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å (legacy): \(permissionStatus.rawValue)")
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏
            try audioSession.setCategory(.playAndRecord, mode: .default, options: [.defaultToSpeaker])
            try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
            
            print("‚úÖ –ê—É–¥–∏–æ—Å–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            completion(true)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏: \(error)")
            completion(false)
        }
    }
    
    private func startAudioRecording() {
        do {
            let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
            let audioFilename = documentsPath.appendingPathComponent("recording_\(Date().timeIntervalSince1970).m4a")
            
            let settings = [
                AVFormatIDKey: Int(kAudioFormatMPEG4AAC),
                AVSampleRateKey: 44100,
                AVNumberOfChannelsKey: 1,
                AVEncoderAudioQualityKey: AVAudioQuality.high.rawValue
            ]
            
            audioRecorder = try AVAudioRecorder(url: audioFilename, settings: settings)
            audioRecorder?.record()
            
            print("üé§ –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–∞")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: \(error)")
        }
    }
    
    private func stopAudioRecording() {
        audioRecorder?.stop()
        audioRecorder = nil
    }
    
    private func startSpeechRecognition() {
        guard let audioEngine = audioEngine, let speechRecognizer = speechRecognizer else { 
            print("‚ùå –ê—É–¥–∏–æ –¥–≤–∏–∂–æ–∫ –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 
        }
        
        if audioEngine.isRunning {
            audioEngine.stop()
            recognitionRequest?.endAudio()
            return
        }
        
        do {
            recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
            
            guard let recognitionRequest = recognitionRequest else { 
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
                return 
            }
            recognitionRequest.shouldReportPartialResults = true
            
            let inputNode = audioEngine.inputNode
            let recordingFormat = inputNode.outputFormat(forBus: 0)
            inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { buffer, _ in
                recognitionRequest.append(buffer)
            }
            
            audioEngine.prepare()
            try audioEngine.start()
            
            print("üéØ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω–æ")
            
            recognitionTask = speechRecognizer.recognitionTask(with: recognitionRequest) { [weak self] result, error in
                guard let self = self else { return }
                
                if let result = result {
                    let transcript = result.bestTranscription.formattedString
                    print("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: \(transcript)")
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    DispatchQueue.main.async {
                        self.transcript = transcript
                        print("üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: \(self.transcript)")
                    }
                }
                
                if error != nil || result?.isFinal == true {
                    self.audioEngine?.stop()
                    inputNode.removeTap(onBus: 0)
                    self.recognitionRequest = nil
                    self.recognitionTask = nil
                    print("üõë –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                }
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: \(error)")
        }
    }
    
    private func stopSpeechRecognition() {
        audioEngine?.stop()
        recognitionRequest?.endAudio()
        recognitionTask?.cancel()
    }
    
    private func createTaskFromRecording() {
        print("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        Task {
            await performAIAnalysis()
        }
    }
    
    private func performAIAnalysis() async {
        print("ü§ñ –í—ã–ø–æ–ª–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...")
        
        do {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é AI
            let result = try await aiService.analyzeVoiceRecording(transcript, audioURL: nil)
            
            await MainActor.run {
                // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
                for extractedTask in result.tasks {
                    let newTask = TaskItem(
                        title: extractedTask.title,
                        description: extractedTask.description ?? "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏",
                        status: .planned,
                        priority: extractedTask.priority,
                        dueDate: extractedTask.dueDate,
                        tags: extractedTask.tags + ["ai-—Å–æ–∑–¥–∞–Ω–∞", "–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å"],
                        isPrivate: false,
                        audioURL: nil,
                        transcript: transcript,
                        createdAt: Date(),
                        updatedAt: Date(),
                        completedDate: nil,
                        parentTaskId: nil,
                        subtasks: []
                    )
                    taskManager.addTask(newTask)
                    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ AI –∑–∞–¥–∞—á–∞: \(extractedTask.title)")
                }
                
                // –ï—Å–ª–∏ AI –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∑–∞–ø–∏—Å—å
                                        if result.tasks.isEmpty {
                    let generalTask = TaskItem(
                        title: "–ó–∞–ø–∏—Å—å –æ—Ç \(DateFormatter.localizedString(from: Date(), dateStyle: .short, timeStyle: .short))",
                        description: transcript.isEmpty ? "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é \(Int(recordingTime)) —Å–µ–∫—É–Ω–¥" : transcript,
                        status: .planned,
                        priority: .medium,
                        dueDate: nil,
                        tags: ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å", "ai-–∞–Ω–∞–ª–∏–∑"],
                        isPrivate: false,
                        audioURL: nil,
                        transcript: transcript.isEmpty ? nil : transcript,
                        createdAt: Date(),
                        updatedAt: Date(),
                        completedDate: nil,
                        parentTaskId: nil,
                        subtasks: []
                    )
                    taskManager.addTask(generalTask)
                    print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–±—â–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–∏")
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                aiAnalysisResult = result.summary
                
                // –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                transcript = ""
                                        print("üéØ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: \(result.tasks.count)")
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: \(error)")
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
            await MainActor.run {
                let fallbackTask = TaskItem(
                    title: "–ó–∞–ø–∏—Å—å –æ—Ç \(DateFormatter.localizedString(from: Date(), dateStyle: .short, timeStyle: .short))",
                    description: transcript.isEmpty ? "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é \(Int(recordingTime)) —Å–µ–∫—É–Ω–¥" : transcript,
                    status: .planned,
                    priority: .medium,
                    dueDate: nil,
                    tags: ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å", "–æ—à–∏–±–∫–∞-ai"],
                    isPrivate: false,
                    audioURL: nil,
                    transcript: transcript.isEmpty ? nil : transcript,
                    createdAt: Date(),
                    updatedAt: Date(),
                    completedDate: nil,
                    parentTaskId: nil,
                    subtasks: []
                )
                taskManager.addTask(fallbackTask)
                transcript = ""
                aiAnalysisResult = "AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            }
        }
    }
    
    // MARK: - AI Testing
    
    func testAIService() {
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞...")
        print("ü§ñ –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å: \(type(of: aiService))")
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Mock —Å–µ—Ä–≤–∏—Å–∞
        Task {
            do {
                let result = try await aiService.analyzeVoiceRecording("–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –∑–∞–≤—Ç—Ä–∞", audioURL: nil)
                print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: \(result.tasks.count) –∑–∞–¥–∞—á –Ω–∞–π–¥–µ–Ω–æ")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: \(error)")
            }
        }
    }
    
    // MARK: - AI Analysis Methods
    
    private func generateAIAnalysis(transcript: String, tasksCount: Int) -> String {
        var analysis = "üéØ **AI –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏**\n\n"
        
        if tasksCount > 0 {
            analysis += "‚úÖ **–ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–¥–∞—á:** \(tasksCount)\n"
            analysis += "üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** \(transcript.prefix(100))...\n\n"
            
            if tasksCount == 1 {
                analysis += "–û—Ç–ª–∏—á–Ω–æ! AI —Å–º–æ–≥ –≤—ã–¥–µ–ª–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏."
            } else if tasksCount <= 3 {
                analysis += "–•–æ—Ä–æ—à–æ! AI –≤—ã–¥–µ–ª–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
            } else {
                analysis += "–û—Ç–ª–∏—á–Ω–æ! AI –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–ª–æ–∂–Ω—É—é –∑–∞–ø–∏—Å—å –∏ –≤—ã–¥–µ–ª–∏–ª –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á."
            }
        } else {
            analysis += "üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** \(transcript.prefix(100))...\n\n"
            analysis += "AI –Ω–µ —Å–º–æ–≥ –≤—ã–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à—É –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        }
        
        return analysis
    }
    
    private func extractTasksFromTranscript(_ transcript: String) -> [ExtractedTask] {
        var tasks: [ExtractedTask] = []
        
        // –ü—Ä–æ—Å—Ç–æ–π AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        let sentences = transcript.components(separatedBy: [".", "!", "?"])
        
        for sentence in sentences {
            let trimmed = sentence.trimmingCharacters(in: .whitespacesAndNewlines)
            if trimmed.count > 10 && isTaskSentence(trimmed) {
                let task = ExtractedTask(
                    title: generateTaskTitle(from: trimmed),
                    description: trimmed,
                    priority: determinePriority(from: trimmed),
                    dueDate: extractDueDate(from: trimmed),
                    tags: extractTags(trimmed),
                    confidence: 0.8
                )
                tasks.append(task)
            }
        }
        
        return tasks
    }
    
    private func isTaskSentence(_ sentence: String) -> Bool {
        let taskKeywords = [
            "–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å", 
            "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å",
            "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å",
            "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–æ–±–∏—Ä–∞—é—Å—å", "–Ω–∞–¥–æ", "—Å–ª–µ–¥—É–µ—Ç", "–≤–∞–∂–Ω–æ"
        ]
        
        let lowercased = sentence.lowercased()
        return taskKeywords.contains { lowercased.contains($0) } || 
               lowercased.contains("–∑–∞–≤—Ç—Ä–∞") || 
               lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") ||
               lowercased.contains("–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
    }
    
    private func generateTaskTitle(from sentence: String) -> String {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        let words = sentence.components(separatedBy: " ")
        let stopWords = [
            "–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å",
            "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–∫—É–ø–∏—Ç—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å",
            "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å",
            "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–æ–±–∏—Ä–∞—é—Å—å", "–Ω–∞–¥–æ", "—Å–ª–µ–¥—É–µ—Ç", "–≤–∞–∂–Ω–æ", "—ç—Ç–æ",
            "–±—ã–ª–æ", "–±—É–¥–µ—Ç", "–µ—Å—Ç—å", "—Å—Ç–∞–ª", "—Å—Ç–∞–ª–∞", "—Å—Ç–∞–ª–∏", "—Å—Ç–∞–ª–æ"
        ]
        
        let keyWords = words.filter { word in
            let cleanWord = word.lowercased().trimmingCharacters(in: .punctuationCharacters)
            return cleanWord.count > 2 && !stopWords.contains(cleanWord)
        }
        
        let title = keyWords.prefix(5).joined(separator: " ")
        return title.isEmpty ? "–ó–∞–¥–∞—á–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏" : title.capitalized
    }
    
    private func determinePriority(from sentence: String) -> TaskPriority {
        let highPriorityKeywords = ["—Å—Ä–æ—á–Ω–æ", "–≤–∞–∂–Ω–æ", "–∫—Ä–∏—Ç–∏—á–Ω–æ", "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"]
        let lowPriorityKeywords = ["–ø–æ—Ç–æ–º", "–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å", "–Ω–µ —Å—Ä–æ—á–Ω–æ"]
        
        if highPriorityKeywords.contains(where: { sentence.lowercased().contains($0) }) {
            return .high
        } else if lowPriorityKeywords.contains(where: { sentence.lowercased().contains($0) }) {
            return .low
        }
        return .medium
    }
    
    private func extractDueDate(from sentence: String) -> Date? {
        let today = Date()
        let calendar = Calendar.current
        
        if sentence.lowercased().contains("—Å–µ–≥–æ–¥–Ω—è") {
            return today
        } else if sentence.lowercased().contains("–∑–∞–≤—Ç—Ä–∞") {
            return calendar.date(byAdding: .day, value: 1, to: today)
        } else if sentence.lowercased().contains("–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ") {
            return calendar.date(byAdding: .weekOfYear, value: 1, to: today)
        }
        
        return nil
    }
    
    private func extractTags(_ text: String) -> [String] {
        var tags: [String] = []
        let lowercased = text.lowercased()
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
        let hashtagPattern = "#\\w+"
        let regex = try? NSRegularExpression(pattern: hashtagPattern)
        let range = NSRange(text.startIndex..., in: text)
        let matches = regex?.matches(in: text, range: range) ?? []
        
        for match in matches {
            if let range = Range(match.range, in: text) {
                let tag = String(text[range])
                tags.append(tag)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let contextTags: [(keywords: [String], tag: String)] = [
            (["–≤—Å—Ç—Ä–µ—á–∞", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "—Å–æ–±—Ä–∞–Ω–∏–µ", "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è"], "–≤—Å—Ç—Ä–µ—á–∞"),
            (["–∑–≤–æ–Ω–æ–∫", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "—Ç–µ–ª–µ—Ñ–æ–Ω"], "–∑–≤–æ–Ω–æ–∫"),
            (["–ø—Ä–æ–µ–∫—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"], "–ø—Ä–æ–µ–∫—Ç"),
            (["–ø–æ–∫—É–ø–∫–∏", "–∫—É–ø–∏—Ç—å", "–º–∞–≥–∞–∑–∏–Ω", "–∑–∞–∫–∞–∑"], "–ø–æ–∫—É–ø–∫–∏"),
            (["–∑–¥–æ—Ä–æ–≤—å–µ", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü–∞", "–∞–ø—Ç–µ–∫–∞"], "–∑–¥–æ—Ä–æ–≤—å–µ"),
            (["—Å–ø–æ—Ä—Ç", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "—Ñ–∏—Ç–Ω–µ—Å", "–∑–∞–ª"], "—Å–ø–æ—Ä—Ç"),
            (["–æ–±—É—á–µ–Ω–∏–µ", "–∏–∑—É—á–∏—Ç—å", "–∫—É—Ä—Å", "–∫–Ω–∏–≥–∞"], "–æ–±—É—á–µ–Ω–∏–µ"),
            (["—Ä–∞–±–æ—Ç–∞", "–æ—Ñ–∏—Å", "–∫–ª–∏–µ–Ω—Ç", "–∑–∞–∫–∞–∑—á–∏–∫"], "—Ä–∞–±–æ—Ç–∞"),
            (["–±—ã—Ç", "—É–±–æ—Ä–∫–∞", "—Å—Ç–∏—Ä–∫–∞", "–≥–æ—Ç–æ–≤–∫–∞"], "–±—ã—Ç"),
            (["—Ñ–∏–Ω–∞–Ω—Å—ã", "–¥–µ–Ω—å–≥–∏", "—Å—á–µ—Ç", "–ø–ª–∞—Ç–µ–∂"], "—Ñ–∏–Ω–∞–Ω—Å—ã")
        ]
        
        for contextTag in contextTags {
            if contextTag.keywords.contains(where: { lowercased.contains($0) }) {
                tags.append(contextTag.tag)
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if lowercased.contains("—Å—Ä–æ—á–Ω–æ") || lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("–∫—Ä–∏—Ç–∏—á–Ω–æ") {
            tags.append("—Å—Ä–æ—á–Ω–æ")
        }
        
        return Array(Set(tags)) // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }
    
    private func generateSummary(_ transcript: String) -> String {
        let sentences = transcript.components(separatedBy: [".", "!", "?"])
        let keySentences = sentences.prefix(3).joined(separator: ". ")
        return keySentences + "."
    }
    
    // MARK: - Computed Properties
    
    var currentDateString: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "E, d MMMM"
        formatter.locale = Locale(identifier: "ru_RU")
        return formatter.string(from: Date())
    }
    
    var currentDayString: String {
        let formatter = DateFormatter()
        formatter.dateFormat = "d MMMM"
        formatter.locale = Locale(identifier: "ru_RU")
        return formatter.string(from: Date())
    }
    
    var greeting: String {
        let hour = Calendar.current.component(.hour, from: Date())
        
        switch hour {
        case 5..<12:
            return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
        case 12..<17:
            return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
        case 17..<22:
            return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        default:
            return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        }
    }
    
    var currentStreak: Int {
        // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç streak
        var streak = 0
        let calendar = Calendar.current
        let now = Date()
        
        for dayOffset in 0... {
            let date = calendar.date(byAdding: .day, value: -dayOffset, to: now) ?? now
            let tasksForDay = tasks.filter { task in
                guard let taskDate = task.dueDate else { return false }
                return calendar.isDate(taskDate, inSameDayAs: date)
            }
            
            if tasksForDay.isEmpty {
                break
            }
            
            let completedCount = tasksForDay.filter { $0.completedDate != nil }.count
            if completedCount > 0 {
                streak += 1
            } else {
                break
            }
        }
        
        return streak
    }
    
    var recordingButtonText: String {
        let hour = Calendar.current.component(.hour, from: Date())
        
        if hour < 12 {
            return "–°–¥–µ–ª–∞–π—Ç–µ –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        } else {
            return "–ó–∞–ø–∏—à–∏—Ç–µ –∏—Ç–æ–≥ –¥–Ω—è"
        }
    }
    
    var availableTags: [String] {
        let allTags = tasks.flatMap { $0.tags }
        return Array(Set(allTags)).sorted()
    }
    
    // MARK: - Public Methods
    
    func tasksForStatus(_ status: TaskStatus) -> [TaskItem] {
        return tasks.filter { $0.status == status }
    }
    
    func toggleSection(_ status: TaskStatus) {
        if collapsedSections.contains(status) {
            collapsedSections.remove(status)
        } else {
            collapsedSections.insert(status)
        }
    }
    
    func completeTask(_ task: TaskItem) {
        taskManager.toggleTaskCompletion(task)
    }
    
    func snoozeTask(_ task: TaskItem, until date: Date) {
        var updatedTask = task
        updatedTask.dueDate = date
        taskManager.updateTask(updatedTask)
    }
    
    func deleteTask(_ task: TaskItem) {
        taskManager.deleteTask(task)
    }
    
    // MARK: - Private Methods
    
    private func setupData() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ TaskManager
        if taskManager.tasks.isEmpty {
            loadSampleData()
        }
    }
    
    private func startPulsingAnimation() {
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
        isRecordingButtonPulsing = false
    }
    
    private func loadSampleData() {
        // Sample tasks for development
        let sampleTasks = [
            TaskItem(
                title: "–°–¥–µ–ª–∞—Ç—å —É–±–æ—Ä–∫—É",
                description: "–ü—Ä–æ–ø—ã–ª–µ—Å–æ—Å–∏—Ç—å –∏ –ø–æ–º—ã—Ç—å –ø–æ–ª—ã",
                status: .completed,
                priority: .medium,
                tags: ["–¥–æ–º", "–±—ã—Ç"],
                createdAt: Date().addingTimeInterval(-86400)
            ),
            TaskItem(
                title: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
                description: "–ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±, —è–π—Ü–∞",
                status: .planned,
                priority: .high,
                dueDate: Date().addingTimeInterval(3600),
                tags: ["–ø–æ–∫—É–ø–∫–∏", "–±—ã—Ç"]
            ),
            TaskItem(
                title: "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ",
                description: "–£–∑–Ω–∞—Ç—å –∫–∞–∫ –¥–µ–ª–∞",
                status: .important,
                priority: .high,
                tags: ["—Å–µ–º—å—è", "–∑–≤–æ–Ω–∫–∏"]
            ),
            TaskItem(
                title: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
                description: "–¢–µ—Ä–∞–ø–µ–≤—Ç, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ",
                status: .stuck,
                priority: .medium,
                tags: ["–∑–¥–æ—Ä–æ–≤—å–µ", "–≤—Ä–∞—á"]
            ),
            TaskItem(
                title: "–ò–∑—É—á–∏—Ç—å SwiftUI",
                description: "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ iOS 17",
                status: .idea,
                priority: .low,
                tags: ["—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ"]
            )
        ]
        
        for task in sampleTasks {
            taskManager.addTask(task)
        }
    }
    
    // MARK: - Task Status Ordering
    
    var orderedTaskStatuses: [TaskStatus] {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±–ª–æ–∫–æ–≤ –∑–∞–¥–∞—á
        return [
            .important,      // –í–∞–∂–Ω–æ–µ - –≤–≤–µ—Ä—Ö—É
            .planned,        // –í –ø–ª–∞–Ω–∞—Ö
            .stuck,          // –ó–∞—Å—Ç—Ä—è–ª–æ
            .waiting,        // –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
            .delegated,      // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–æ
            .paused,         // –ù–∞ –ø–∞—É–∑–µ
            .recurring,      // –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è
            .idea,           // –ò–¥–µ–∏ –Ω–∞ –ø–æ—Ç–æ–º
            .completed       // –°–≤–µ—Ä—à–∏–ª–æ—Å—å - –≤–Ω–∏–∑—É
        ]
    }
}
