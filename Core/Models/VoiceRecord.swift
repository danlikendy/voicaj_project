import Foundation

struct VoiceRecord: Identifiable, Codable {
    let id: UUID
    let audioURL: URL?
    let transcript: String
    let duration: TimeInterval
    let createdAt: Date
    var aiAnalysis: AIAnalysis?
    
    init(transcript: String, duration: TimeInterval, audioURL: URL? = nil) {
        self.id = UUID()
        self.transcript = transcript
        self.duration = duration
        self.audioURL = audioURL
        self.createdAt = Date()
        self.aiAnalysis = nil
    }
}

struct AIAnalysis: Codable {
    let extractedTasks: [ExtractedTask]
    let summary: String
    let sentiment: String
    let priority: String
    let tags: [String]
    let createdAt: Date
    
    init(extractedTasks: [ExtractedTask], summary: String, sentiment: String, priority: String, tags: [String]) {
        self.extractedTasks = extractedTasks
        self.summary = summary
        self.sentiment = sentiment
        self.priority = priority
        self.tags = tags
        self.createdAt = Date()
    }
}

struct ExtractedTask: Codable {
    let title: String
    let description: String?
    let priority: TaskPriority
    let dueDate: Date?
    let tags: [String]
    let confidence: Double // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (0.0 - 1.0)
    let address: String? // –ê–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    
    init(title: String, description: String? = nil, priority: TaskPriority = .medium, dueDate: Date? = nil, tags: [String] = [], confidence: Double = 0.8, address: String? = nil) {
        self.title = title
        self.description = description
        self.priority = priority
        self.dueDate = dueDate
        self.tags = tags
        self.confidence = confidence
        self.address = address
    }
}

enum Mood: String, CaseIterable, Codable {
    case calm = "calm"           // –°–ø–æ–∫–æ–π–Ω—ã–π
    case energetic = "energetic" // –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π
    case stressed = "stressed"   // –ù–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π
    case happy = "happy"         // –†–∞–¥–æ—Å—Ç–Ω—ã–π
    case tired = "tired"         // –£—Å—Ç–∞–≤—à–∏–π
    case focused = "focused"     // –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–π
    
    var displayName: String {
        switch self {
        case .calm: return "–°–ø–æ–∫–æ–π–Ω—ã–π"
        case .energetic: return "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π"
        case .stressed: return "–ù–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π"
        case .happy: return "–†–∞–¥–æ—Å—Ç–Ω—ã–π"
        case .tired: return "–£—Å—Ç–∞–≤—à–∏–π"
        case .focused: return "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–π"
        }
    }
    
    var emoji: String {
        switch self {
        case .calm: return "üòå"
        case .energetic: return "üí™"
        case .stressed: return "üò∞"
        case .happy: return "üòä"
        case .tired: return "üò¥"
        case .focused: return "üéØ"
        }
    }
    
    var color: String {
        switch self {
        case .calm: return "mossGreen"
        case .energetic: return "honeyGold"
        case .stressed: return "terracotta"
        case .happy: return "mint"
        case .tired: return "warmGrey"
        case .focused: return "cornflowerBlue"
        }
    }
}

enum VoiceTemplate: String, CaseIterable, Codable {
    case dailySummary = "dailySummary"     // –ò—Ç–æ–≥ –¥–Ω—è
    case tomorrowPlan = "tomorrowPlan"     // –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    case weeklyPlan = "weeklyPlan"         // –ü–ª–∞–Ω –Ω–µ–¥–µ–ª–∏
    case quickNote = "quickNote"           // –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞
    case meetingNotes = "meetingNotes"     // –ó–∞–º–µ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏
    case projectUpdate = "projectUpdate"   // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    
    var displayName: String {
        switch self {
        case .dailySummary: return "–ò—Ç–æ–≥ –¥–Ω—è"
        case .tomorrowPlan: return "–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
        case .weeklyPlan: return "–ü–ª–∞–Ω –Ω–µ–¥–µ–ª–∏"
        case .quickNote: return "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞"
        case .meetingNotes: return "–ó–∞–º–µ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏"
        case .projectUpdate: return "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        }
    }
    
    var description: String {
        switch self {
        case .dailySummary: return "–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ –Ω–µ —É—Å–ø–µ–ª"
        case .tomorrowPlan: return "–ü–ª–∞–Ω—ã –∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
        case .weeklyPlan: return "–¶–µ–ª–∏ –∏ –ø–ª–∞–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"
        case .quickNote: return "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –º—ã—Å–ª–∏ –∏–ª–∏ –∏–¥–µ–∏"
        case .meetingNotes: return "–ó–∞–º–µ—Ç–∫–∏ —Å –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ —Å–æ–≤–µ—â–∞–Ω–∏—è"
        case .projectUpdate: return "–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        }
    }
    
    var icon: String {
        switch self {
        case .dailySummary: return "sun.max.fill"
        case .tomorrowPlan: return "calendar.badge.plus"
        case .weeklyPlan: return "calendar.badge.clock"
        case .quickNote: return "note.text"
        case .meetingNotes: return "person.2.fill"
        case .projectUpdate: return "folder.fill"
        }
    }
}

// MARK: - VoiceRecord Extensions
extension VoiceRecord {
    var formattedDuration: String {
        let minutes = Int(duration) / 60
        let seconds = Int(duration) % 60
        return String(format: "%d:%02d", minutes, seconds)
    }
    
    var formattedDate: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: createdAt)
    }
    
    var isToday: Bool {
        Calendar.current.isDateInToday(createdAt)
    }
    
    var isYesterday: Bool {
        Calendar.current.isDateInYesterday(createdAt)
    }
}
