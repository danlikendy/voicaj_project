import Foundation

// MARK: - AI Service Factory
class AIServiceFactory {
    enum AIServiceType {
        case localOllama
        case openAI
        case mock
    }
    
    static func createAIService(type: AIServiceType = .localOllama) -> any AIServiceProtocol {
        switch type {
        case .localOllama:
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Ollama (Qwen2.5)")
            return LocalAIService()
            
        case .openAI:
            let apiKey = AIConfig.openAIKeyFromEnv
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if apiKey.isEmpty || apiKey == "your-openai-api-key-here" || apiKey == "sk-proj-your-key-here" {
                print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å")
                return LocalAIService()
            }
            
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI GPT-4o —Å–µ—Ä–≤–∏—Å")
            return AIService(apiKey: apiKey)
            
        case .mock:
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock AI —Å–µ—Ä–≤–∏—Å")
            return MockAIService()
        }
    }
    
    static func createAIService() -> any AIServiceProtocol {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        return createAIService(type: .localOllama)
    }
    
    static func createAIServiceWithKey(_ apiKey: String) -> any AIServiceProtocol {
        if apiKey.isEmpty {
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mock AI —Å–µ—Ä–≤–∏—Å")
            return MockAIService()
        }
        
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π OpenAI GPT-4o —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º")
        return AIService(apiKey: apiKey)
    }
}


