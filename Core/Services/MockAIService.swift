import Foundation
import Combine

// MARK: - Mock AI Service
@preconcurrency
class MockAIService: AIServiceProtocol, ObservableObject {
    @Published var conversationHistory: [AIMessage] = []
    @Published var contextMemory: [String: Any] = [:]
    
    // MARK: - Protocol Conformance
    var nonisolatedConversationHistory: [AIMessage] {
        get async {
            await MainActor.run {
                return self.conversationHistory
            }
        }
    }
    
    var nonisolatedContextMemory: [String: Any] {
        get async {
            await MainActor.run {
                return self.contextMemory
            }
        }
    }
    
    func generateResponse(for message: String, context: [String]) async throws -> String {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        let userMessage = AIMessage(role: "user", content: message)
        conversationHistory.append(userMessage)
        
        let response = generateContextualResponse(to: message)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        let aiMessage = AIMessage(role: "assistant", content: response)
        conversationHistory.append(aiMessage)
        
        return response
    }
    
    func analyzeVoiceRecording(_ transcript: String, audioURL: URL?) async throws -> VoiceAnalysisResult {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É AI –∞–Ω–∞–ª–∏–∑–∞
        try await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
        
        let extractedTasks = extractAdvancedTasks(from: transcript)
        
        return VoiceAnalysisResult(
            tasks: extractedTasks,
            summary: "ü§ñ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ \(extractedTasks.count) –∑–∞–¥–∞—á –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.",
            confidence: 0.85,
            audioURL: audioURL
        )
    }
    
    func createTaskFromMessage(_ message: String, context: [String]) async throws -> TaskCreationResult {
        if containsTaskKeywords(message) {
            let task = ExtractedTask(
                title: generateSimpleTitle(from: message),
                description: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è: \(message)",
                priority: .medium,
                dueDate: nil,
                tags: ["—á–∞—Ç"],
                confidence: 0.7
            )
            
            return TaskCreationResult(
                task: task,
                message: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: \(task.title)",
                success: true
            )
        } else {
            return TaskCreationResult(
                task: nil,
                message: generateContextualResponse(to: message),
                success: false
            )
        }
    }
    
    func updateContextMemory(key: String, value: Any) async {
        contextMemory[key] = value
    }
    
    func getContextValue(for key: String) async -> Any? {
        return contextMemory[key]
    }
    
    func clearContextMemory() async {
        contextMemory.removeAll()
    }
    
    // MARK: - Helper Methods
    
    private func generateContextualResponse(to message: String) -> String {
        let lowercased = message.lowercased()
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if lowercased.contains("–ø—Ä–∏–≤–µ—Ç") || lowercased.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") || lowercased.contains("hi") || lowercased.contains("hello") {
            let responses = [
                "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ü§ñ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–µ–ª–∞.",
                "–ü—Ä–∏–≤–µ—Ç! üòä –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–ª–∞–Ω—ã."
            ]
            return responses.randomElement() ?? responses[0]
        }
        
        // –ü–æ–º–æ—â—å
        if lowercased.contains("–ø–æ–º–æ—â—å") || lowercased.contains("–ø–æ–º–æ–≥–∏") || lowercased.contains("help") {
            let helpResponses = [
                "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! üöÄ –Ø –º–æ–≥—É:\n\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏\n‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –¥–µ–ª",
                "–†–∞–¥ –ø–æ–º–æ—á—å! üí° –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n‚Ä¢ –ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã\n‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–µ–≥–∏",
                "–ü–æ–º–æ–≥—É —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! ü§ù –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞:\n\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\n‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"
            ]
            return helpResponses.randomElement() ?? helpResponses[0]
        }
        
        // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        if lowercased.contains("—Å–ø–∞—Å–∏–±–æ") || lowercased.contains("–±–ª–∞–≥–æ–¥–∞—Ä—é") || lowercased.contains("thanks") {
            let thanksResponses = [
                "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! ü§ù –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
                "–ù–µ –∑–∞ —á—Ç–æ! üòÑ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –µ—â–µ –ø–æ–º–æ—â—å."
            ]
            return thanksResponses.randomElement() ?? thanksResponses[0]
        }
        
        // –ó–∞–¥–∞—á–∏
        if lowercased.contains("–∑–∞–¥–∞—á–∞") || lowercased.contains("task") || lowercased.contains("–¥–µ–ª–∞") {
            let taskResponses = [
                "–û—Ç–ª–∏—á–Ω–æ! üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ, –∏ —è –ø–æ–º–æ–≥—É –µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å.",
                "–ü–æ–Ω—è–ª! üéØ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –Ω–µ–µ –ø–ª–∞–Ω —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏.",
                "–•–æ—Ä–æ—à–æ! ‚úÖ –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à—É –∑–∞–¥–∞—á—É –ø–æ –ø—É–Ω–∫—Ç–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
            ]
            return taskResponses.randomElement() ?? taskResponses[0]
        }
        
        // –í—Ä–µ–º—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if lowercased.contains("–≤—Ä–µ–º—è") || lowercased.contains("–ø–ª–∞–Ω") || lowercased.contains("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ") {
            let timeResponses = [
                "–í—Ä–µ–º—è - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π —Ä–µ—Å—É—Ä—Å! ‚è∞ –î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.",
                "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üìÖ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å.",
                "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è –∑–∞–Ω—è—Ç—å—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º! üóìÔ∏è –Ø –ø–æ–º–æ–≥—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–µ–ª–∞."
            ]
            return timeResponses.randomElement() ?? timeResponses[0]
        }
        
        // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        let defaultResponses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòä –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.",
            "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! ü§î –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.",
            "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! üí≠ –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ.",
            "–û—Ç–ª–∏—á–Ω–æ! üéØ –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ.",
            "–ü–æ–Ω—è—Ç–Ω–æ! üëç –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –∏ —è –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
        ]
        return defaultResponses.randomElement() ?? defaultResponses[0]
    }
    
    private func extractAdvancedTasks(from transcript: String) -> [ExtractedTask] {
        var tasks: [ExtractedTask] = []
        let lowercased = transcript.lowercased()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        if lowercased.contains("—Ç–∞–∫–∂–µ") || lowercased.contains("–≤—Ç–æ—Ä—É—é") || lowercased.contains("–≤—Ç–æ—Ä–∞—è") {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∏–∑ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
            
            // –ó–∞–¥–∞—á–∞ 1: –ü–æ–∫—É–ø–∫–∏
            if lowercased.contains("–ø—Ä–æ–¥—É–∫—Ç") || lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") || lowercased.contains("–∫—É–ø–∏—Ç—å") {
                let task1 = ExtractedTask(
                    title: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
                    description: "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
                    priority: .low,
                    dueDate: extractAdvancedDueDate(from: transcript),
                    tags: ["–ø–æ–∫—É–ø–∫–∏", "–º–∞–≥–∞–∑–∏–Ω", "–∑–∞–≤—Ç—Ä–∞"],
                    confidence: 0.9
                )
                tasks.append(task1)
            }
            
            // –ó–∞–¥–∞—á–∞ 2: –†–∞–±–æ—Ç–∞
            if lowercased.contains("—Ä–∞–±–æ—Ç–∞") || lowercased.contains("–≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É") {
                let task2 = ExtractedTask(
                    title: "–í–∞–∂–Ω–∞—è —Ä–∞–±–æ—á–∞—è –∑–∞–¥–∞—á–∞",
                    description: "–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ —Ä–∞–±–æ—Ç–µ",
                    priority: .high,
                    dueDate: extractAdvancedDueDateForSecondTask(from: transcript),
                    tags: ["—Ä–∞–±–æ—Ç–∞", "–≤–∞–∂–Ω–æ", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"],
                    confidence: 0.9
                )
                tasks.append(task2)
            }
        } else {
            // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
            let sentences = transcript.components(separatedBy: [".", "!", "?"])
                .map { $0.trimmingCharacters(in: .whitespacesAndNewlines) }
                .filter { !$0.isEmpty }
            
            // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∞—è, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É
            if transcript.count < 20 {
                let task = ExtractedTask(
                    title: generateAdvancedTitle(from: transcript),
                    description: generateAdvancedDescription(from: transcript),
                    priority: determineAdvancedPriority(from: transcript),
                    dueDate: extractAdvancedDueDate(from: transcript),
                    tags: generateAdvancedTags(from: transcript),
                    confidence: 0.8
                )
                tasks.append(task)
                return tasks
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–¥–∞—á
            for sentence in sentences {
                if isTaskSentence(sentence) {
                    let task = ExtractedTask(
                        title: generateAdvancedTitle(from: sentence),
                        description: generateAdvancedDescription(from: sentence),
                        priority: determineAdvancedPriority(from: sentence),
                        dueDate: extractAdvancedDueDate(from: sentence),
                        tags: generateAdvancedTags(from: sentence),
                        confidence: 0.9
                    )
                    tasks.append(task)
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–¥–∞—á, —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é
            if tasks.isEmpty {
                let task = ExtractedTask(
                    title: generateAdvancedTitle(from: transcript),
                    description: generateAdvancedDescription(from: transcript),
                    priority: .medium,
                    dueDate: extractAdvancedDueDate(from: transcript),
                    tags: generateAdvancedTags(from: transcript),
                    confidence: 0.7
                )
                tasks.append(task)
            }
        }
        
        return tasks
    }
    
    private func extractSimpleTasks(from transcript: String) -> [ExtractedTask] {
        let sentences = transcript.components(separatedBy: [".", "!", "?"])
        var tasks: [ExtractedTask] = []
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∞—è, —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∑–∞–¥–∞—á—É
        if transcript.count < 15 {
            let task = ExtractedTask(
                title: generateSimpleTitle(from: transcript),
                description: "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å: \(transcript)",
                priority: .medium,
                dueDate: nil,
                tags: ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å", "–±—ã—Å—Ç—Ä–∞—è-–∑–∞–¥–∞—á–∞"],
                confidence: 0.7
            )
            tasks.append(task)
            return tasks
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        for sentence in sentences {
            let trimmed = sentence.trimmingCharacters(in: .whitespacesAndNewlines)
            if trimmed.count > 5 {
                let task = ExtractedTask(
                    title: generateSimpleTitle(from: trimmed),
                    description: trimmed,
                    priority: determinePriority(from: trimmed),
                    dueDate: extractDueDate(from: trimmed),
                    tags: generateTags(from: trimmed),
                    confidence: 0.8
                )
                tasks.append(task)
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–¥–∞—á, —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é
        if tasks.isEmpty {
            let task = ExtractedTask(
                title: "–ó–∞–ø–∏—Å—å –æ—Ç \(DateFormatter.localizedString(from: Date(), dateStyle: .short, timeStyle: .short))",
                description: transcript,
                priority: .medium,
                dueDate: nil,
                tags: ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å", "–∑–∞–º–µ—Ç–∫–∞"],
                confidence: 0.6
            )
            tasks.append(task)
        }
        
        return tasks
    }
    
    private func containsTaskKeywords(_ text: String) -> Bool {
        let keywords = ["–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å"]
        let lowercased = text.lowercased()
        return keywords.contains { lowercased.contains($0) }
    }
    
    private func generateSimpleTitle(from text: String) -> String {
        let words = text.components(separatedBy: " ")
        let stopWords = ["–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å", "—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–∑–∞—á–µ–º", "–ø–æ—á–µ–º—É"]
        
        let keyWords = words.filter { word in
            let cleanWord = word.lowercased().trimmingCharacters(in: .punctuationCharacters)
            return !stopWords.contains(cleanWord) && cleanWord.count > 2
        }
        
        let title = keyWords.prefix(4).joined(separator: " ")
        return title.isEmpty ? "–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞" : title
    }
    
    private func isTaskLikePhrase(_ text: String) -> Bool {
        let lowercased = text.lowercased()
        let taskPatterns = [
            "–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–≥–æ–¥",
            "–∫—É–ø–∏—Ç—å", "—Å–¥–µ–ª–∞—Ç—å", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
            "—É–±—Ä–∞—Ç—å", "–ø–æ—á–∏–Ω–∏—Ç—å", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å"
        ]
        return taskPatterns.contains { lowercased.contains($0) }
    }
    
    private func determinePriority(from text: String) -> TaskPriority {
        let lowercased = text.lowercased()
        if lowercased.contains("—Å—Ä–æ—á–Ω–æ") || lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("–∫—Ä–∏—Ç–∏—á–Ω–æ") {
            return .high
        } else if lowercased.contains("–Ω–µ –≤–∞–∂–Ω–æ") || lowercased.contains("–ø–æ—Ç–æ–º") {
            return .low
        }
        return .medium
    }
    
    private func extractDueDate(from text: String) -> Date? {
        let lowercased = text.lowercased()
        let calendar = Calendar.current
        let today = Date()
        
        if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") {
            return calendar.date(byAdding: .day, value: 1, to: today)
        } else if lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            return calendar.date(bySettingHour: 23, minute: 59, second: 0, of: today)
        } else if lowercased.contains("–Ω–µ–¥–µ–ª—è") {
            return calendar.date(byAdding: .weekOfYear, value: 1, to: today)
        }
        
        return nil
    }
    
    private func generateTags(from text: String) -> [String] {
        var tags = ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å"]
        let lowercased = text.lowercased()
        
        if lowercased.contains("–∫—É–ø–∏—Ç—å") || lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") {
            tags.append("–ø–æ–∫—É–ø–∫–∏")
        }
        if lowercased.contains("–∑–≤–æ–Ω–æ–∫") || lowercased.contains("–ø–æ–∑–≤–æ–Ω–∏—Ç—å") {
            tags.append("–∑–≤–æ–Ω–∫–∏")
        }
        if lowercased.contains("–≤—Å—Ç—Ä–µ—á–∞") || lowercased.contains("–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è") {
            tags.append("–≤—Å—Ç—Ä–µ—á–∏")
        }
        if lowercased.contains("—É–±–æ—Ä–∫–∞") || lowercased.contains("—É–±—Ä–∞—Ç—å") {
            tags.append("–¥–æ–º")
        }
        
        return tags
    }
    
    // MARK: - Advanced Analysis Methods
    
    private func isTaskSentence(_ sentence: String) -> Bool {
        let lowercased = sentence.lowercased()
        let taskKeywords = [
            "–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å",
            "–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–∫—É–ø–∏—Ç—å", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
            "—É–±—Ä–∞—Ç—å", "–ø–æ—á–∏–Ω–∏—Ç—å", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
        ]
        return taskKeywords.contains { lowercased.contains($0) }
    }
    
    private func generateAdvancedTitle(from text: String) -> String {
        let lowercased = text.lowercased()
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –¥–µ–∫–∞–Ω–∞—Ç–∞/—É—á–µ–±—ã
        if lowercased.contains("–¥–µ–∫–∞–Ω–∞—Ç") {
            return "–°—Ö–æ–¥–∏—Ç—å –≤ –¥–µ–∫–∞–Ω–∞—Ç"
        }
        if lowercased.contains("–≤—É–∑") || lowercased.contains("—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç") {
            return "–î–µ–ª–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ"
        }
        if lowercased.contains("—É—á–µ–±–∞") {
            return "–£—á–µ–±–Ω—ã–µ –¥–µ–ª–∞"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        if lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") && lowercased.contains("–∫—É–ø–∏—Ç—å") {
            return "–ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
        }
        if lowercased.contains("–∫—É–ø–∏—Ç—å") && lowercased.contains("–ø—Ä–æ–¥—É–∫—Ç") {
            return "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
        }
        if lowercased.contains("—Å—Ö–æ–¥–∏—Ç—å") && lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") {
            return "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        if lowercased.contains("—Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è") || lowercased.contains("—Ä–∞–±–æ—Ç–∞") {
            return "–†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        if lowercased.contains("–ø–æ–∑–≤–æ–Ω–∏—Ç—å") || lowercased.contains("–∑–≤–æ–Ω–æ–∫") {
            return "–°–¥–µ–ª–∞—Ç—å –∑–≤–æ–Ω–æ–∫"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        if lowercased.contains("2 —á–∞—Å–æ–≤ –¥–Ω—è") || lowercased.contains("–¥–æ 2 —á–∞—Å–æ–≤") {
            return "–ó–∞–¥–∞—á–∞ –Ω–∞ 14:00"
        }
        if lowercased.contains("—á–∞—Å–æ–≤ –¥–Ω—è") {
            return "–ó–∞–¥–∞—á–∞ –Ω–∞ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è"
        }
        
        // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if lowercased.contains("—Å—Ö–æ–¥–∏–ª") || lowercased.contains("—Å—Ö–æ–¥–∏—Ç—å") {
            return "–°—Ö–æ–¥–∏—Ç—å –ø–æ –¥–µ–ª–∞–º"
        }
        if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") {
            return "–ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, —Å–æ–∑–¥–∞–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        return "–í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞"
    }
    
    private func generateAdvancedDescription(from text: String) -> String {
        // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let lowercased = text.lowercased()
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –¥–µ–∫–∞–Ω–∞—Ç–∞
        if lowercased.contains("–¥–µ–∫–∞–Ω–∞—Ç") {
            return "–ü–æ—Å–µ—Ç–∏—Ç—å –¥–µ–∫–∞–Ω–∞—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
        if lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") && lowercased.contains("–ø—Ä–æ–¥—É–∫—Ç") {
            return "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –∫—É–ø–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        if lowercased.contains("—Ä–∞–±–æ—Ç–∞") && lowercased.contains("–≤–∞–∂–Ω") {
            return "–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—á—É—é –∑–∞–¥–∞—á—É"
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        if lowercased.contains("2 —á–∞—Å–æ–≤ –¥–Ω—è") || lowercased.contains("–¥–æ 2 —á–∞—Å–æ–≤") {
            return "–í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ 14:00 –∑–∞–≤—Ç—Ä–∞. –¢—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."
        }
        
        // –û–±—â–∏–µ —Å–ª—É—á–∞–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") && lowercased.contains("—Å—Ö–æ–¥–∏–ª") {
            return "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–æ–º–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–∞–Ω–µ–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        } else if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") {
            return "–í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤–Ω–∏–º–∞–Ω–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è."
        } else if lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            return "–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —Ç—Ä–µ–±—É—é—â–∞—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –≤—ã—Å–æ–∫–∏–π."
        } else if lowercased.contains("–Ω–µ–¥–µ–ª—è") {
            return "–ó–∞–¥–∞—á–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é, —Ç—Ä–µ–±—É—é—â–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        } else if lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("—Å—Ä–æ—á–Ω–æ") {
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, —Ç—Ä–µ–±—É—é—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        } else {
            return "–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –∑–∞–¥–∞—á–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        }
    }
    
    private func determineAdvancedPriority(from text: String) -> TaskPriority {
        let lowercased = text.lowercased()
        
        if lowercased.contains("—Å—Ä–æ—á–Ω–æ") || lowercased.contains("–∫—Ä–∏—Ç–∏—á–Ω–æ") || lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            return .high
        } else if lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("–≤–∞–∂–Ω") || lowercased.contains("–¥–µ–∫–∞–Ω–∞—Ç") {
            // –î–µ–∫–∞–Ω–∞—Ç –∏ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return .high
        } else if lowercased.contains("2 —á–∞—Å–æ–≤ –¥–Ω—è") || lowercased.contains("–¥–æ 2 —á–∞—Å–æ–≤") {
            // –ó–∞–¥–∞—á–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return .high
        } else if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") && lowercased.contains("—Å—Ö–æ–¥–∏–ª") {
            // –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å –≤—ã—Ö–æ–¥–æ–º - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return .high
        } else if lowercased.contains("–Ω–µ –≤–∞–∂–Ω–æ") || lowercased.contains("–ø–æ—Ç–æ–º") || lowercased.contains("–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å") {
            return .low
        } else if lowercased.contains("—Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è") {
            // –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—ã—á–Ω–æ —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return .medium
        } else if lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") || lowercased.contains("–ø–æ–∫—É–ø–∫–∏") {
            // –ü–æ–∫—É–ø–∫–∏ –æ–±—ã—á–Ω–æ –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return .low
        }
        
        return .high // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á
    }
    
    private func extractAdvancedDueDate(from text: String) -> Date? {
        let lowercased = text.lowercased()
        let calendar = Calendar.current
        let today = Date()
        
        if lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            return today
        } else if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") || lowercased.contains("–∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ") {
            // –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "2 —á–∞—Å–æ–≤ –¥–Ω—è" –∏–ª–∏ "–¥–æ 2 —á–∞—Å–æ–≤", —Å—Ç–∞–≤–∏–º –Ω–∞ 14:00 –∑–∞–≤—Ç—Ä–∞
            if lowercased.contains("2 —á–∞—Å–æ–≤ –¥–Ω—è") || lowercased.contains("–¥–æ 2 —á–∞—Å–æ–≤") {
                let tomorrow = calendar.date(byAdding: .day, value: 1, to: today)!
                var components = calendar.dateComponents([.year, .month, .day], from: tomorrow)
                components.hour = 14
                components.minute = 0
                return calendar.date(from: components)
            }
            // –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "—Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è" –∏–ª–∏ "–∫–æ–Ω—Ü–∞ –¥–Ω—è", —Å—Ç–∞–≤–∏–º –Ω–∞ 18:00 –∑–∞–≤—Ç—Ä–∞
            else if lowercased.contains("—Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è") || lowercased.contains("–∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è") || 
               lowercased.contains("–∫–æ–Ω—Ü–∞ –¥–Ω—è") || lowercased.contains("–¥–æ –∫–æ–Ω—Ü–∞") {
                let tomorrow = calendar.date(byAdding: .day, value: 1, to: today)!
                var components = calendar.dateComponents([.year, .month, .day], from: tomorrow)
                components.hour = 18
                components.minute = 0
                return calendar.date(from: components)
            }
            // –ò–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –∑–∞–≤—Ç—Ä–∞
            return calendar.date(byAdding: .day, value: 1, to: today)
        } else if lowercased.contains("–Ω–µ–¥–µ–ª–µ") || lowercased.contains("–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ") {
            return calendar.date(byAdding: .weekOfYear, value: 1, to: today)
        } else if lowercased.contains("—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ") {
            return calendar.date(byAdding: .weekOfYear, value: 2, to: today)
        }
        
        return nil
    }
    
    private func extractAdvancedDueDateForSecondTask(from text: String) -> Date? {
        let lowercased = text.lowercased()
        let calendar = Calendar.current
        let today = Date()
        
        if lowercased.contains("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞") || lowercased.contains("—á–µ—Ä–µ–∑ –¥–µ–Ω—å") {
            return calendar.date(byAdding: .day, value: 2, to: today)
        } else if lowercased.contains("—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é") {
            return calendar.date(byAdding: .weekOfYear, value: 1, to: today)
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ 2 –¥–Ω—è
        return calendar.date(byAdding: .day, value: 2, to: today)
    }
    
    private func generateAdvancedTags(from text: String) -> [String] {
        let lowercased = text.lowercased()
        var tags: [String] = []
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
        if lowercased.contains("–ø–æ–∫—É–ø") || lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") || lowercased.contains("–∫—É–ø–∏—Ç—å") {
            tags.append("–ø–æ–∫—É–ø–∫–∏")
        }
        if lowercased.contains("—Ä–∞–±–æ—Ç–∞") || lowercased.contains("–æ—Ñ–∏—Å") || lowercased.contains("—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ") {
            tags.append("—Ä–∞–±–æ—Ç–∞")
        }
        if lowercased.contains("–∑–¥–æ—Ä–æ–≤—å–µ") || lowercased.contains("–≤—Ä–∞—á") || lowercased.contains("–∑–∞–ø–∏—Å–∞—Ç—å—Å—è") {
            tags.append("–∑–¥–æ—Ä–æ–≤—å–µ")
        }
        if lowercased.contains("—Å–µ–º—å—è") || lowercased.contains("–º–∞–º–∞") || lowercased.contains("–ø–∞–ø–∞") || lowercased.contains("–ø–æ–∑–≤–æ–Ω–∏—Ç—å") {
            tags.append("—Å–µ–º—å—è")
        }
        if lowercased.contains("—É—á–µ–±–∞") || lowercased.contains("–∏–∑—É—á–∏—Ç—å") || lowercased.contains("–ø—Ä–æ—á–∏—Ç–∞—Ç—å") {
            tags.append("—É—á–µ–±–∞")
        }
        if lowercased.contains("–¥–æ–º") || lowercased.contains("—É–±—Ä–∞—Ç—å") || lowercased.contains("–ø–æ—á–∏–Ω–∏—Ç—å") {
            tags.append("–¥–æ–º")
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
        if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") {
            tags.append("–∑–∞–≤—Ç—Ä–∞")
        }
        if lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            tags.append("—Å–µ–≥–æ–¥–Ω—è")
        }
        if lowercased.contains("–Ω–µ–¥–µ–ª—è") {
            tags.append("–Ω–µ–¥–µ–ª—è")
        }
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–µ–≥–∏
        if lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("—Å—Ä–æ—á–Ω–æ") {
            tags.append("–≤–∞–∂–Ω–æ")
        }
        
        return tags.isEmpty ? ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å", "–∑–∞–¥–∞—á–∞"] : tags
    }
}
