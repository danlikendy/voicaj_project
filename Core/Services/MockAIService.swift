import Foundation
import Combine

// MARK: - Mock AI Service
@preconcurrency
class MockAIService: AIServiceProtocol, ObservableObject {
    @Published var conversationHistory: [AIMessage] = []
    @Published var contextMemory: [String: Any] = [:]
    
    // MARK: - Protocol Conformance
    var nonisolatedConversationHistory: [AIMessage] {
        get async {
            await MainActor.run {
                return self.conversationHistory
            }
        }
    }
    
    var nonisolatedContextMemory: [String: Any] {
        get async {
            await MainActor.run {
                return self.contextMemory
            }
        }
    }
    
    func generateResponse(for message: String, context: [String]) async throws -> String {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        let userMessage = AIMessage(role: "user", content: message)
        conversationHistory.append(userMessage)
        
        let response = generateContextualResponse(to: message)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        let aiMessage = AIMessage(role: "assistant", content: response)
        conversationHistory.append(aiMessage)
        
        return response
    }
    
    func analyzeVoiceRecording(_ transcript: String, audioURL: URL?) async throws -> VoiceAnalysisResult {
        // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è Mock —Å–µ—Ä–≤–∏—Å–∞
        let extractedTasks = extractSimpleTasks(from: transcript)
        
        return VoiceAnalysisResult(
            tasks: extractedTasks,
            summary: "Mock AI –∞–Ω–∞–ª–∏–∑: –ù–∞–π–¥–µ–Ω–æ \(extractedTasks.count) –∑–∞–¥–∞—á –≤ –∑–∞–ø–∏—Å–∏",
            confidence: 0.7,
            audioURL: audioURL
        )
    }
    
    func createTaskFromMessage(_ message: String, context: [String]) async throws -> TaskCreationResult {
        if containsTaskKeywords(message) {
            let task = ExtractedTask(
                title: generateSimpleTitle(from: message),
                description: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è: \(message)",
                priority: .medium,
                dueDate: nil,
                tags: ["—á–∞—Ç"],
                confidence: 0.7
            )
            
            return TaskCreationResult(
                task: task,
                message: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: \(task.title)",
                success: true
            )
        } else {
            return TaskCreationResult(
                task: nil,
                message: generateContextualResponse(to: message),
                success: false
            )
        }
    }
    
    func updateContextMemory(key: String, value: Any) async {
        contextMemory[key] = value
    }
    
    func getContextValue(for key: String) async -> Any? {
        return contextMemory[key]
    }
    
    func clearContextMemory() async {
        contextMemory.removeAll()
    }
    
    // MARK: - Helper Methods
    
    private func generateContextualResponse(to message: String) -> String {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É AI
        let lowercased = message.lowercased()
        
        if lowercased.contains("–ø—Ä–∏–≤–µ—Ç") || lowercased.contains("–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π") {
            return "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ—ç—Ç–æ–º—É —è —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."
        }
        
        if lowercased.contains("–ø–æ–º–æ—â—å") || lowercased.contains("–ø–æ–º–æ–≥–∏") {
            return "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ù–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á. –°–µ–π—á–∞—Å —è –º–æ–≥—É:\n\n‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –±–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏\n‚Ä¢ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é"
        }
        
        if lowercased.contains("—Å–ø–∞—Å–∏–±–æ") || lowercased.contains("–±–ª–∞–≥–æ–¥–∞—Ä—é") {
            return "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        }
        
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòä –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ —è –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π AI –æ—Ç–≤–µ—Ç."
    }
    
    private func extractSimpleTasks(from transcript: String) -> [ExtractedTask] {
        let sentences = transcript.components(separatedBy: [".", "!", "?"])
        var tasks: [ExtractedTask] = []
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∞—è, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        if transcript.count < 10 && (transcript.contains("—Ä–∞–∑") || transcript.contains("–¥–≤–∞") || transcript.contains("—Ç—Ä–∏")) {
            let task = ExtractedTask(
                title: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: \(transcript)",
                description: "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏: \(transcript)",
                priority: .low,
                dueDate: nil,
                tags: ["—Ç–µ—Å—Ç", "–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å"],
                confidence: 0.5
            )
            tasks.append(task)
            return tasks
        }
        
        for sentence in sentences {
            let trimmed = sentence.trimmingCharacters(in: .whitespacesAndNewlines)
            if trimmed.count > 5 && (containsTaskKeywords(trimmed) || isTaskLikePhrase(trimmed)) {
                let task = ExtractedTask(
                    title: generateSimpleTitle(from: trimmed),
                    description: trimmed,
                    priority: determinePriority(from: trimmed),
                    dueDate: extractDueDate(from: trimmed),
                    tags: generateTags(from: trimmed),
                    confidence: 0.6
                )
                tasks.append(task)
            }
        }
        
        return tasks
    }
    
    private func containsTaskKeywords(_ text: String) -> Bool {
        let keywords = ["–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å"]
        let lowercased = text.lowercased()
        return keywords.contains { lowercased.contains($0) }
    }
    
    private func generateSimpleTitle(from text: String) -> String {
        let words = text.components(separatedBy: " ")
        let stopWords = ["–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–µ–Ω", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ö–æ—á—É", "—Å–¥–µ–ª–∞—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å"]
        
        let keyWords = words.filter { word in
            !stopWords.contains(word.lowercased()) && word.count > 2
        }
        
        return keyWords.prefix(5).joined(separator: " ")
    }
    
    private func isTaskLikePhrase(_ text: String) -> Bool {
        let lowercased = text.lowercased()
        let taskPatterns = [
            "–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "–≥–æ–¥",
            "–∫—É–ø–∏—Ç—å", "—Å–¥–µ–ª–∞—Ç—å", "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è",
            "—É–±—Ä–∞—Ç—å", "–ø–æ—á–∏–Ω–∏—Ç—å", "–∏–∑—É—á–∏—Ç—å", "–ø—Ä–æ—á–∏—Ç–∞—Ç—å"
        ]
        return taskPatterns.contains { lowercased.contains($0) }
    }
    
    private func determinePriority(from text: String) -> TaskPriority {
        let lowercased = text.lowercased()
        if lowercased.contains("—Å—Ä–æ—á–Ω–æ") || lowercased.contains("–≤–∞–∂–Ω–æ") || lowercased.contains("–∫—Ä–∏—Ç–∏—á–Ω–æ") {
            return .high
        } else if lowercased.contains("–Ω–µ –≤–∞–∂–Ω–æ") || lowercased.contains("–ø–æ—Ç–æ–º") {
            return .low
        }
        return .medium
    }
    
    private func extractDueDate(from text: String) -> Date? {
        let lowercased = text.lowercased()
        let calendar = Calendar.current
        let today = Date()
        
        if lowercased.contains("–∑–∞–≤—Ç—Ä–∞") {
            return calendar.date(byAdding: .day, value: 1, to: today)
        } else if lowercased.contains("—Å–µ–≥–æ–¥–Ω—è") {
            return calendar.date(bySettingHour: 23, minute: 59, second: 0, of: today)
        } else if lowercased.contains("–Ω–µ–¥–µ–ª—è") {
            return calendar.date(byAdding: .weekOfYear, value: 1, to: today)
        }
        
        return nil
    }
    
    private func generateTags(from text: String) -> [String] {
        var tags = ["–≥–æ–ª–æ—Å–æ–≤–∞—è-–∑–∞–ø–∏—Å—å"]
        let lowercased = text.lowercased()
        
        if lowercased.contains("–∫—É–ø–∏—Ç—å") || lowercased.contains("–º–∞–≥–∞–∑–∏–Ω") {
            tags.append("–ø–æ–∫—É–ø–∫–∏")
        }
        if lowercased.contains("–∑–≤–æ–Ω–æ–∫") || lowercased.contains("–ø–æ–∑–≤–æ–Ω–∏—Ç—å") {
            tags.append("–∑–≤–æ–Ω–∫–∏")
        }
        if lowercased.contains("–≤—Å—Ç—Ä–µ—á–∞") || lowercased.contains("–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è") {
            tags.append("–≤—Å—Ç—Ä–µ—á–∏")
        }
        if lowercased.contains("—É–±–æ—Ä–∫–∞") || lowercased.contains("—É–±—Ä–∞—Ç—å") {
            tags.append("–¥–æ–º")
        }
        
        return tags
    }
}
