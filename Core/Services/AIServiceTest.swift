import Foundation

// MARK: - AI Service Test
class AIServiceTest {
    
    static func testAIService() async {
        print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞...")
        
        let aiService = AIServiceFactory.createAIService()
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞
        if aiService is MockAIService {
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock AI —Å–µ—Ä–≤–∏—Å - API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ AI_SETUP_INSTRUCTIONS.md")
        } else {
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π GPT-4o —Å–µ—Ä–≤–∏—Å")
        }
        
        // –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        let testTranscript = "–ó–∞–≤—Ç—Ä–∞ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —ç—Ç–æ –≤–∞–∂–Ω–æ. –¢–∞–∫–∂–µ –ø–ª–∞–Ω–∏—Ä—É—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ."
        
        do {
            print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...")
            let result = try await aiService.analyzeVoiceRecording(testTranscript, audioURL: nil)
            
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print("   - –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: \(result.tasks.count)")
            print("   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: \(result.confidence)")
            print("   - –°–≤–æ–¥–∫–∞: \(result.summary)")
            
            for (index, task) in result.tasks.enumerated() {
                print("   üìã –ó–∞–¥–∞—á–∞ \(index + 1):")
                print("      - –ù–∞–∑–≤–∞–Ω–∏–µ: \(task.title)")
                print("      - –û–ø–∏—Å–∞–Ω–∏–µ: \(task.description ?? "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")")
                print("      - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: \(task.priority)")
                print("      - –¢–µ–≥–∏: \(task.tags.joined(separator: ", "))")
                if let dueDate = task.dueDate {
                    print("      - –°—Ä–æ–∫: \(dueDate)")
                }
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: \(error)")
        }
        
        // –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ
        do {
            print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ...")
            let response = try await aiService.generateResponse(for: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", context: [])
            print("üí¨ –û—Ç–≤–µ—Ç AI: \(response)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: \(error)")
        }
        
        print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    }
    
    static func testMockService() async {
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Mock AI —Å–µ—Ä–≤–∏—Å...")
        
        let mockService = MockAIService()
        
        // –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        do {
            let result = try await mockService.analyzeVoiceRecording("–ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –∑–∞–≤—Ç—Ä–∞", audioURL: nil)
            print("üìä Mock –∞–Ω–∞–ª–∏–∑: \(result.tasks.count) –∑–∞–¥–∞—á –Ω–∞–π–¥–µ–Ω–æ")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ Mock —Å–µ—Ä–≤–∏—Å–∞: \(error)")
        }
        
        // –¢–µ—Å—Ç —á–∞—Ç–∞
        do {
            let response = try await mockService.generateResponse(for: "–ü—Ä–∏–≤–µ—Ç", context: [])
            print("üí¨ Mock –æ—Ç–≤–µ—Ç: \(response)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ Mock —á–∞—Ç–∞: \(error)")
        }
    }
}


